'use server';

/**
 * @fileOverview Defines the core AI logic for the business analysis dashboard.
 * This file contains Genkit flows for fetching initial business metrics
 * and for regenerating SEO headlines on demand.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';

/**
 * Defines the required inputs for the main business analysis flow.
 */
const BusinessAnalysisInput = z.object({
  businessName: z.string().describe('The official name of the business being analyzed.'),
  location: z.string().describe('The city or area where the business is located.'),
});
export type AnalyzeBusinessInput = z.infer<typeof BusinessAnalysisInput>;

/**
 * Defines the structure of the output from the main analysis flow.
 */
const BusinessAnalysisOutput = z.object({
  rating: z.number().describe('A simulated Google rating on a 5-star scale.'),
  reviews: z.number().describe('A simulated count of total customer reviews.'),
  headline: z.string().describe('A compelling, SEO-optimized headline generated by AI.'),
});
export type AnalyzeBusinessOutput = z.infer<typeof BusinessAnalysisOutput>;

/**
 * Defines the output for the headline regeneration flow.
 */
const RegenerateHeadlineOutputSchema = z.object({
    headline: z.string().describe('A fresh, AI-generated SEO headline.'),
});
export type RegenerateHeadlineOutput = z.infer<typeof RegenerateHeadlineOutputSchema>;


/**
 * Public-facing function to trigger the main business analysis.
 * @param input - The business name and location.
 * @returns A promise resolving to the full analysis output.
 */
export async function analyzeBusiness(
  input: AnalyzeBusinessInput
): Promise<AnalyzeBusinessOutput> {
  return mainAnalysisFlow(input);
}

/**
 * Public-facing function to regenerate only the SEO headline.
 * @param input - The business name and location.
 * @returns A promise resolving to an object containing the new headline.
 */
export async function regenerateHeadline(
  input: AnalyzeBusinessInput
): Promise<RegenerateHeadlineOutput> {
    return regenerateHeadlineFlow(input);
}


const headlineGenerationPrompt = ai.definePrompt({
  name: 'headlineGenerationPrompt',
  model: 'googleai/gemini-1.5-flash-latest',
  input: { schema: BusinessAnalysisInput },
  output: { schema: z.object({ headline: z.string() }) },
  prompt: `You are an expert digital marketing strategist specializing in local SEO.
  
For the business named "{{businessName}}" in "{{location}}", generate a single, compelling, SEO-friendly headline for their website's homepage.

The headline should be catchy, informative, and designed to attract local customers.
Example: "Discover why The Corner Cafe is San Francisco's favorite spot for coffee and community."`,
});


const mainAnalysisFlow = ai.defineFlow(
  {
    name: 'mainAnalysisFlow',
    inputSchema: BusinessAnalysisInput,
    outputSchema: BusinessAnalysisOutput,
  },
  async (input) => {
    // Generate the AI headline in parallel with simulating other data.
    const headlinePromise = headlineGenerationPrompt(input);
    
    // Simulate fetching rating and review data from a source like Google Business.
    // This uses pseudo-random values for demonstration.
    const simulatedRating = parseFloat((Math.random() * (4.9 - 3.8) + 3.8).toFixed(1));
    const simulatedReviews = Math.floor(Math.random() * (500 - 50) + 50);

    const { output } = await headlinePromise;

    return {
      headline: output!.headline,
      rating: simulatedRating,
      reviews: simulatedReviews,
    };
  }
);

const regenerateHeadlineFlow = ai.defineFlow(
    {
      name: 'regenerateHeadlineFlow',
      inputSchema: BusinessAnalysisInput,
      outputSchema: RegenerateHeadlineOutputSchema,
    },
    async (input) => {
        // This flow focuses solely on getting a new headline.
        const { output } = await headlineGenerationPrompt(input);
        return output!;
    }
);
